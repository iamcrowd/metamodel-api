package com.gilia.builder.jsontranslator;

import com.gilia.exceptions.AlreadyExistException;
import com.gilia.exceptions.InformationNotFoundException;
import com.gilia.metamodel.Metamodel;
import com.gilia.metamodel.entitytype.objecttype.ObjectType;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.util.ArrayList;

import static com.gilia.utils.Constants.*;

/**
 * Represents a concrete builder in the Builder design pattern.
 * This class is in charge of building the Metamodel instance according to an EER JSON.
 */
public class EERTranslator implements JSONTranslator {
    @Override
    public Metamodel createMetamodel(JSONObject json) {
        String ontologyIRI = "";
        try {
            ontologyIRI = (String) ((JSONObject) ((JSONObject) json.get(KEY_NAMESPACES)).get(KEY_ONTOLOGY_IRI)).get(KEY_VALUE);
        } catch (NullPointerException | ClassCastException e) {
            System.out.println("WARNING: ontologyIRI was not obtained");
        }

        Metamodel newMetamodel = new Metamodel(ontologyIRI);
        JSONArray jsonEntities = (JSONArray) json.get(KEY_ENTITIES);
        JSONArray jsonAttributes = (JSONArray) json.get(KEY_ATTRIBUTES);
        JSONArray jsonRelationships = (JSONArray) json.get(KEY_RELATIONSHIPS);
        JSONArray jsonLinks = (JSONArray) json.get(KEY_LINKS);

        // The order of this calls is important (at least for now)
        identifyObjectTypes(newMetamodel, jsonEntities);
        //identifyRelationships(newMetamodel, jsonLinks);
        //identifySubclasses(newMetamodel, jsonLinks);

        return newMetamodel;
    }

    /**
     * Identifies each entity from a JSONArray of entities obtained from the EER JSON and generates every object type equivalent to the entites given.
     * After identifying each object type, it generates the corresponding metamodel class and incorporates it to the metamodel instance.
     *
     * @param model        Metamodel instance that will incorporate the object types generated by this method
     * @param jsonEntities JSONArray with the name of the entities represented within the model.
     */
    private void identifyObjectTypes(Metamodel model, JSONArray jsonEntities) {

        if (jsonEntities != null) {
            ArrayList newObjectsType = new ArrayList();
            for (Object eerEntity : jsonEntities) {
                String entityName = (String) ((JSONObject) eerEntity).get(KEY_NAME);
                if (model.checkEntityExistence(entityName) == null) {
                    ObjectType newObjectType = new ObjectType(entityName);
                    newObjectsType.add(newObjectType);
                } else {
                    throw new AlreadyExistException(ALREADY_EXIST_ENTITY_ERROR);
                }
            }
            model.addEntities(newObjectsType);
        } else {
            throw new InformationNotFoundException(ENTITIES_INFORMATION_NOT_FOUND_ERROR);
        }
    }
}
